{"version":3,"sources":["node_modules/browser-pack/_prelude.js","dist/index.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","__assign","this","Object","assign","arguments","p","prototype","hasOwnProperty","defineProperty","value","Rx","window","global","Immutable","BehaviorSubject","Subject","createStore","initialState","initialReducers","initialEffects","initialMiddleware","initialExtras","mergedInitialState","alwaysMap","state$","userExtra$","newExtras$","scan","extras","incoming","share","subscribe","action$","storeReducers","newReducer$","acc","concat","mappedReducers","newMappedReducer$","storeResponses","newResponses","stateUpdate$","do","action","isPlainObject","console","error","type","withLatestFrom","reducers","mappedReducersThatMatchAction","filter","reducer","name","stateMap","_a","actionType","indexOf","setIn","payload","path","reduce","outgoingValue","updateIn","currentValue","fns","fn","catch","err","Observable","throw","actionsWithState$","state","storeExtras","actionsWithResultingStateUpdate$","_","flatMap","actionName","matchingResponses","response","newActions","map","x","targetName","getIn","getMap","toJS","via","from","_dispatcher","Array","isArray","forEach","onNext","_addReducers","alwaysArray","Boolean","keys","stateKey","effects","_addEffects","_registerOnStateTree","currentFn","key","actionsApi","ofType","getValue","effect","_addMiddleware","middleware","api","_addExtras","extra","_addResponses","responses","resp","item","register","input","addReducers","dispatch","getState","lookup","toJSON","addMiddleware","once","actions","take","changes","distinctUntilChanged","skip","Map","isMap","fromJS","objectTag","toString","default","staunch"],"mappings":"CAAA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,SAAAC,UAAA,YAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAA,GAAAC,OAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,GAAAL,SAAAD,UAAA,YAAAA,OAAA,KAAA,GAAAH,GAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,MAAAa,GAAA,SAAAT,EAAAU,EAAAJ,gBCAA,YACA,IAAAK,GAAAC,MAAAA,KAAAD,UAAAE,OAAAC,QAAA,SAAArB,GACA,IAAA,GAAAG,GAAAK,EAAA,EAAAP,EAAAqB,UAAAP,OAAAP,EAAAP,EAAAO,IAAA,CACAL,EAAAmB,UAAAd,EACA,KAAA,GAAAe,KAAApB,GAAA,GAAAiB,OAAAI,UAAAC,eAAAX,KAAAX,EAAAoB,GACAvB,EAAAuB,GAAApB,EAAAoB,GAEA,MAAAvB,GAEAoB,QAAAM,eAAAb,EAAA,cAAAc,MAAA,MACA,IAAAC,SAAAC,UAAA,YAAAA,OAAA,YAAAC,KAAA,YAAAA,EAAA,MAAA,IACA,IAAAC,SAAAF,UAAA,YAAAA,OAAA,mBAAAC,KAAA,YAAAA,EAAA,aAAA,IACA,IAAAE,GAAAJ,EAAAI,eACA,IAAAC,GAAAL,EAAAK,OACA,SAAAC,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,GAAAC,GAAAC,EAAAN,EACA,IAAAO,GAAA,GAAAV,GAAAQ,EACA,IAAAG,GAAA,GAAAX,MACA,IAAAY,GAAA,GAAAX,EACAW,GAAAC,KAAA,SAAAC,EAAAC,GACA,MAAA3B,QAAAC,UAAAyB,EAAAC,QACAC,QAAAC,UAAAN,EAEA,IAAAO,GAAA,GAAAjB,EAEA,IAAAkB,GAAA,GAAAnB,MACA,IAAAoB,GAAA,GAAAnB,EACAmB,GAAAP,KAAA,SAAAQ,EAAAN,GACA,MAAAM,GAAAC,OAAAP,QACAC,QAAAC,UAAAE,EAEA,IAAAI,GAAA,GAAAvB,MACA,IAAAwB,GAAA,GAAAvB,EACAuB,GAAAX,KAAA,SAAAQ,EAAAN,GACA,MAAAM,GAAAC,OAAAP,QACAC,QAAAC,UAAAM,EAEA,IAAAE,GAAA,GAAAzB,MACA,IAAA0B,GAAA,GAAAzB,EACAyB,GAAAb,KAAA,SAAAQ,EAAAN,GACA,MAAAM,GAAAC,OAAAP,QACAC,QAAAC,UAAAQ,EAEA,IAAAE,GAAAT,EACAU,GAAA,SAAAC,GACA,IAAAC,EAAAD,GAAA,CACA,MAAAE,SAAAC,MAAA,4DAEA,SAAAH,GAAAI,OAAA,SAAA,CACA,MAAAF,SAAAC,MAAA,uCAAAH,MAGAK,eAAAf,EAAAI,EAAA,SAAAM,EAAAM,EAAAZ,GACA,GAAAa,GAAAb,EACAc,OAAA,SAAAC,GACA,MAAAA,GAAAC,OAAAV,EAAAI,MAEA,QACAJ,OAAAA,EACAM,SAAAC,EAAAd,OAAAa,MAGAtB,KAAA,SAAA2B,EAAAC,GACA,GAAAZ,GAAAY,EAAAZ,OAAAM,EAAAM,EAAAN,QACA,IAAAO,GAAAb,EAAAI,aAAAJ,KAAA,SAAAA,EAAA,GAEA,IAAAa,EAAAC,QAAA,eAAA,EAAA,CACA,MAAAH,GAAAI,MAAAf,EAAAgB,QAAAC,KAAArC,GAAAoB,EAAAgB,aAAAlD,YAEA,CACA,MAAAwC,GAAAY,OAAA,SAAAC,EAAAV,GACA,MAAAU,GAAAC,SAAAX,EAAAQ,KAAA,SAAAI,GACA,MAAAZ,GAAAa,IAAAJ,OAAA,SAAApD,EAAAyD,GACA,MAAAA,GAAAtE,KAAA,KAAAa,EAAAkC,EAAAmB,IACAE,MAEAV,KAEAhC,GAAAQ,OAEAW,GACA0B,MAAA,SAAAC,GAEA,MAAA1D,GAAA2D,WAAAC,MAAAF,KAEArC,UAAAP,EAIA,IAAA+C,GAAAvC,EAAAgB,eAAAxB,EAAA,SAAAmB,EAAA6B,GACA,OACA7B,OAAAA,EACA6B,MAAAA,IAGA,IAAAC,IACAjD,OAAAA,EACAQ,QAAAA,EACAuC,kBAAAA,EACAG,iCAAAH,EAKAA,GACAvB,eAAAT,GACAY,OAAA,SAAAI,GACA,GAAAoB,GAAApB,EAAA,GAAAhB,EAAAgB,EAAA,EACA,OAAAhB,GAAA1C,OAAA,IAEA+E,QAAA,SAAA/C,GACA,GAAA0B,GAAA1B,EAAA,GAAAc,EAAAY,EAAAZ,OAAA6B,EAAAjB,EAAAiB,KACA,IAAAjC,GAAAV,EAAA,EACA,IAAAgD,GAAAlC,EAAAI,IACA,IAAA+B,GAAAvC,EACAY,OAAA,SAAA4B,GAAA,MAAAA,GAAA1B,OAAAwB,GACA,IAAAG,GAAAF,EAAAG,IAAA,SAAAC,GACA,OACAnC,KAAAmC,EAAAC,WACAxB,QAAAa,EAAAY,MAAAF,EAAAtB,KAAAyB,OAAAC,OACAC,IAAA,iBAAAV,EAAA,OAGA,OAAAnE,GAAA2D,WAAAmB,KAAAR,KAEAjD,UAAA,SAAAY,GAAA,MAAA8C,GAAA9C,IAOA,SAAA8C,GAAA9C,GACA,GAAA+C,MAAAC,QAAAhD,GAAA,CACA,MAAAA,GAAAiD,QAAA,SAAAxG,GACA4C,EAAA6D,OAAAzG,KAGA,MAAA4C,GAAA6D,OAAAlD,GAOA,QAAAmD,GAAA7C,GACA8C,EAAA9C,GAAA2C,QAAA,SAAAxC,GACA,SAAAA,KAAA,WAAA,CACAlB,EAAA2D,QACAjC,QACAK,OAAA7B,OAAAgB,GAAAD,OAAA6C,WAGA,GAAApD,EAAAQ,GAAA,CACA,GAAAA,EAAAoB,MAAA,CACA,GAAApB,EAAAH,SAAA,CAKA/C,OAAA+F,KAAA7C,EAAAoB,OAAAoB,QAAA,SAAAM,GACAJ,GAAAlC,KAAAsC,EAAAjC,IAAAb,EAAAH,aAGA,GAAAG,EAAA+C,QAAA,CACAC,EAAAhD,EAAA+C,SAKAE,EAAAjD,EAAAoB,MACA,QAEA,GAAApB,EAAAQ,MAAAR,EAAAH,SAAA,CACA/C,OAAA+F,KAAA7C,EAAAH,UAAA2C,QAAA,SAAAvC,GACA,GAAAiD,GAAAlD,EAAAH,SAAAI,EACAf,GAAAuD,QACAjC,QAAAxB,OAAAgB,EAAAQ,MACAK,KAAAqC,GACAjD,KAAAA,KAGA,QAKA,GAAAD,EAAAQ,MAAAR,EAAAa,IAAA,CACA/B,EAAA2D,QACAjC,QAAAxB,OAAAgB,EAAAQ,MAAAT,OAAA6C,SACA/B,OAAA7B,OAAAgB,EAAAa,KAAAd,OAAA6C,eAGA,CAEA,IAAA,GAAAO,KAAAnD,GAAA,CACAlB,EAAA2D,QACAjC,QAAAxB,OAAAmE,GAAApD,OAAA6C,SACA/B,OAAA7B,OAAAgB,EAAAmD,IAAApD,OAAA6C,gBAOA,QAAAI,GAAAD,GACA,GAAAK,IACAC,OAAA,SAAA5B,GACA,MAAAN,GAAApB,OAAA,SAAAtB,GACA,MAAAA,GAAAc,OAAAI,OAAA8B,KAIA,IAAAjD,GAAA1B,OAAAC,UAAAsE,EAAAhD,EAAAiF,WACAX,GAAAI,GAAAP,QAAA,SAAAe,GACAA,EAAA/G,KAAA,KAAA4G,EAAA5E,GACAqD,IAAA,SAAAtC,GACA,MAAA3C,MAAA2C,GAAA4C,IAAA,WAAAlC,KAAAsD,EAAAtD,MAAA,OAEAuC,QAAA,SAAAjD,GACA8C,EAAA9C,OAIA,QAAAiE,GAAAC,GACAd,EAAAc,GAAAjB,QAAA,SAAAiB,GACAA,EAAAjH,KAAA,KAAAkH,KAGA,QAAAC,GAAAnF,GACAmE,EAAAnE,GAAAgE,QAAA,SAAAoB,GACAtF,EAAAmE,OAAAmB,KAGA,QAAAX,GAAA7B,GACA,IAAA,GAAA+B,KAAA/B,GAAA,CAEAiB,GACA1C,KAAA,aAAAwD,EAAA,IACA5C,SACAC,MAAA2C,GACA9F,MAAA+D,EAAA+B,OAKA,QAAAU,GAAAC,GACAnB,EAAAmB,GAAAtB,QAAA,SAAAuB,GACAjH,OAAA+F,KAAAkB,GAAAvB,QAAA,SAAAf,GACA,GAAAuC,GAAAD,EAAAtC,EACArC,GAAAqD,QACAxC,KAAAwB,EACAjB,QAAAxB,OAAAgF,EAAAxD,MAAAT,OAAA6C,SACAb,WAAAiC,EAAAzE,aAKA,GAAAmE,IACAtF,OAAAA,EACAQ,QAAAA,EACAuC,kBAAAA,EACAG,iCAAAH,EACA8C,SAAA,SAAAC,GACA,GAAA9C,GAAA8C,EAAA9C,MAAAvB,EAAAqE,EAAArE,SAAAkD,EAAAmB,EAAAnB,QAAAe,EAAAI,EAAAJ,SACA,IAAAjE,EAAA,CACA6C,EAAA7C,GAEA,GAAAkD,EAAA,CACAC,EAAAD,GAEA,GAAA3B,EAAA,CACA6B,EAAA7B,GAEA,GAAA0C,EAAA,CACAD,EAAAC,GAEA,MAAAJ,IAEAS,YAAA,SAAAtE,GACA6C,EAAA7C,EACA,OAAA6D,IAEAU,SAAA,SAAA7E,GACA8C,EAAA9C,EACA,OAAAmE,IAEAW,SAAA,SAAA7D,GACA,GAAA8D,GAAA3B,EAAAnC,EACA,OAAApC,GAAAkF,WAAAtB,MAAAsC,EAAArC,QAEAC,KAAA,SAAA1B,GACA,GAAA8D,GAAA3B,EAAAnC,EACA,OAAApC,GAAAkF,WAAAtB,MAAAsC,EAAArC,OAAAC,QAEAqC,OAAA,SAAA/D,GACA,GAAA8D,GAAA3B,EAAAnC,EACA,OAAApC,GAAAkF,WAAAtB,MAAAsC,EAAArC,OAAAsC,UAEAC,cAAA,SAAAf,GACAD,EAAAC,EACA,OAAAC,IAEAe,KAAA,SAAAC,GACA,GAAAJ,GAAA3B,EAAA+B,EACA,OAAAvD,GAAApB,OAAA,SAAA+B,GACA,MAAAwC,GAAAjE,QAAAyB,EAAAvC,OAAAI,OAAA,IACAgF,KAAA,IAEAC,QAAA,SAAApE,GACA,GAAA8D,GAAA3B,EAAAnC,EACA,OAAApC,GAAAyD,IAAA,SAAAC,GAAA,MAAAA,GAAAE,MAAAsC,KACAO,uBACAC,KAAA,IAIApC,GAAA5E,EACAkF,GAAAjF,EACAyF,GAAAxF,EACA2F,GAAA1F,EACA,SAAAE,GAAA+F,GACA,MAAAzG,GAAAsH,IAAAC,MAAAd,GAAAA,EAAAzG,EAAAwH,OAAAf,OAEA,QAAAvB,GAAAuB,GACA,SAAAlF,OAAAkF,GAAAnE,OAAA6C,SAEA,QAAApD,GAAAnC,GACA,GAAA6H,GAAA,iBACA,OAAApI,QAAAI,UAAAiI,SAAA3I,KAAAa,KAAA6H,EAEA,QAAAjD,GAAAxD,GACA,MAAAhB,GAAAsH,IAAAtG,GAEA,MAAAiF,GAEAnH,EAAAqB,YAAAA,CACArB,GAAA6I,QAAAxH,CACA,IAAAL,cAAAA,QAAA8H,UAAA,YAAA,CACA9H,OAAA8H,SACAzH,YAAAA","sourceRoot":"","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Rx = (typeof window !== \"undefined\" ? window['Rx'] : typeof global !== \"undefined\" ? global['Rx'] : null);\nvar Immutable = (typeof window !== \"undefined\" ? window['Immutable'] : typeof global !== \"undefined\" ? global['Immutable'] : null);\nvar BehaviorSubject = Rx.BehaviorSubject;\nvar Subject = Rx.Subject;\nfunction createStore(initialState, initialReducers, initialEffects, initialMiddleware, initialExtras) {\n    var mergedInitialState = alwaysMap(initialState);\n    var state$ = new BehaviorSubject(mergedInitialState);\n    var userExtra$ = new BehaviorSubject({});\n    var newExtras$ = new Subject();\n    newExtras$.scan(function (extras, incoming) {\n        return Object.assign({}, extras, incoming);\n    }, {}).share().subscribe(userExtra$);\n    // stream of actions\n    var action$ = new Subject();\n    // reducers to act upon state\n    var storeReducers = new BehaviorSubject([]);\n    var newReducer$ = new Subject();\n    newReducer$.scan(function (acc, incoming) {\n        return acc.concat(incoming);\n    }, []).share().subscribe(storeReducers);\n    // Mapped reducers\n    var mappedReducers = new BehaviorSubject([]);\n    var newMappedReducer$ = new Subject();\n    newMappedReducer$.scan(function (acc, incoming) {\n        return acc.concat(incoming);\n    }, []).share().subscribe(mappedReducers);\n    // responses\n    var storeResponses = new BehaviorSubject([]);\n    var newResponses = new Subject();\n    newResponses.scan(function (acc, incoming) {\n        return acc.concat(incoming);\n    }, []).share().subscribe(storeResponses);\n    // stream\n    var stateUpdate$ = action$\n        .do(function (action) {\n        if (!isPlainObject(action)) {\n            return console.error('Please provide an object with at least a `type` property');\n        }\n        if ((typeof action.type) !== 'string') {\n            return console.error('Action was missing a `type` property', action);\n        }\n    })\n        .withLatestFrom(storeReducers, mappedReducers, function (action, reducers, mappedReducers) {\n        var mappedReducersThatMatchAction = mappedReducers\n            .filter(function (reducer) {\n            return reducer.name === action.type;\n        });\n        return {\n            action: action,\n            reducers: mappedReducersThatMatchAction.concat(reducers),\n        };\n    })\n        .scan(function (stateMap, _a) {\n        var action = _a.action, reducers = _a.reducers;\n        var actionType = action.type || (typeof action === 'string' ? action : '');\n        // is it a @@namespace ?\n        if (actionType.indexOf('@@NS-INIT') === 0) {\n            return stateMap.setIn(action.payload.path, alwaysMap((action.payload || {}).value));\n        }\n        else {\n            return reducers.reduce(function (outgoingValue, reducer) {\n                return outgoingValue.updateIn(reducer.path, function (currentValue) {\n                    return reducer.fns.reduce(function (value, fn) {\n                        return fn.call(null, value, action, outgoingValue);\n                    }, currentValue);\n                });\n            }, stateMap);\n        }\n    }, mergedInitialState).share();\n    // Push all state updates back onto state$ value\n    stateUpdate$\n        .catch(function (err) {\n        // console.error(err);\n        return Rx.Observable.throw(err);\n    })\n        .subscribe(state$);\n    /**\n     * Create a stream that has updates + resulting state updates\n     */\n    var actionsWithState$ = action$.withLatestFrom(state$, function (action, state) {\n        return {\n            action: action,\n            state: state\n        };\n    });\n    var storeExtras = {\n        state$: state$,\n        action$: action$,\n        actionsWithState$: actionsWithState$,\n        actionsWithResultingStateUpdate$: actionsWithState$\n    };\n    /**\n     * Setup responses for declarative cross-domain communication\n     */\n    actionsWithState$\n        .withLatestFrom(storeResponses)\n        .filter(function (_a) {\n        var _ = _a[0], storeResponses = _a[1];\n        return storeResponses.length > 0;\n    })\n        .flatMap(function (incoming) {\n        var _a = incoming[0], action = _a.action, state = _a.state;\n        var storeResponses = incoming[1];\n        var actionName = action.type;\n        var matchingResponses = storeResponses\n            .filter(function (response) { return response.name === actionName; });\n        var newActions = matchingResponses.map(function (x) {\n            return {\n                type: x.targetName,\n                payload: state.getIn(x.path, getMap({})).toJS(),\n                via: \"[response to (\" + actionName + \")]\"\n            };\n        });\n        return Rx.Observable.from(newActions);\n    })\n        .subscribe(function (action) { return _dispatcher(action); });\n    /**\n     * Dispatch 1 or many actions\n     * @param action\n     * @returns {*}\n     * @private\n     */\n    function _dispatcher(action) {\n        if (Array.isArray(action)) {\n            return action.forEach(function (a) {\n                action$.onNext(a);\n            });\n        }\n        return action$.onNext(action);\n    }\n    /**\n     * Add either plain functions or {path, fns} pairs\n     * @param reducers\n     * @private\n     */\n    function _addReducers(reducers) {\n        alwaysArray(reducers).forEach(function (reducer) {\n            if (typeof reducer === 'function') {\n                newReducer$.onNext({\n                    path: [],\n                    fns: [].concat(reducer).filter(Boolean)\n                });\n            }\n            if (isPlainObject(reducer)) {\n                if (reducer.state) {\n                    if (reducer.reducers) {\n                        /**\n                         * if 'state' and 'reducers' key were found,\n                         * we bind the reducers to that top-level state key\n                         */\n                        Object.keys(reducer.state).forEach(function (stateKey) {\n                            _addReducers({ path: stateKey, fns: reducer.reducers });\n                        });\n                    }\n                    if (reducer.effects) {\n                        _addEffects(reducer.effects);\n                    }\n                    /**\n                     *\n                     */\n                    _registerOnStateTree(reducer.state);\n                    return;\n                }\n                if (reducer.path && reducer.reducers) {\n                    Object.keys(reducer.reducers).forEach(function (name) {\n                        var currentFn = reducer.reducers[name];\n                        newMappedReducer$.onNext({\n                            path: [].concat(reducer.path),\n                            fns: [currentFn],\n                            name: name\n                        });\n                    });\n                    return;\n                }\n                /**\n                 * if path/fn pairs given\n                 */\n                if (reducer.path && reducer.fns) {\n                    newReducer$.onNext({\n                        path: [].concat(reducer.path).filter(Boolean),\n                        fns: [].concat(reducer.fns).filter(Boolean)\n                    });\n                }\n                else {\n                    // redux style key: fn pairs\n                    for (var key in reducer) {\n                        newReducer$.onNext({\n                            path: [].concat(key).filter(Boolean),\n                            fns: [].concat(reducer[key]).filter(Boolean)\n                        });\n                    }\n                }\n            }\n        });\n    }\n    function _addEffects(effects) {\n        var actionsApi = {\n            ofType: function (actionName) {\n                return actionsWithState$.filter(function (incoming) {\n                    return incoming.action.type === actionName;\n                });\n            }\n        };\n        var extras = Object.assign({}, storeExtras, userExtra$.getValue());\n        alwaysArray(effects).forEach(function (effect) {\n            effect.call(null, actionsApi, extras)\n                .map(function (action) {\n                return __assign({}, action, { via: '[effect]', name: (effect.name || '') });\n            })\n                .forEach(function (action) {\n                _dispatcher(action);\n            });\n        });\n    }\n    function _addMiddleware(middleware) {\n        alwaysArray(middleware).forEach(function (middleware) {\n            middleware.call(null, api);\n        });\n    }\n    function _addExtras(extras) {\n        alwaysArray(extras).forEach(function (extra) {\n            newExtras$.onNext(extra);\n        });\n    }\n    function _registerOnStateTree(state) {\n        for (var key in state) {\n            // now init with action\n            _dispatcher({\n                type: '@@NS-INIT(' + key + ')',\n                payload: {\n                    path: [key],\n                    value: state[key]\n                }\n            });\n        }\n    }\n    function _addResponses(responses) {\n        alwaysArray(responses).forEach(function (resp) {\n            Object.keys(resp).forEach(function (actionName) {\n                var item = resp[actionName];\n                newResponses.onNext({\n                    name: actionName,\n                    path: [].concat(item.path).filter(Boolean),\n                    targetName: item.action\n                });\n            });\n        });\n    }\n    var api = {\n        state$: state$,\n        action$: action$,\n        actionsWithState$: actionsWithState$,\n        actionsWithResultingStateUpdate$: actionsWithState$,\n        register: function (input) {\n            var state = input.state, reducers = input.reducers, effects = input.effects, responses = input.responses;\n            if (reducers) {\n                _addReducers(reducers);\n            }\n            if (effects) {\n                _addEffects(effects);\n            }\n            if (state) {\n                _registerOnStateTree(state);\n            }\n            if (responses) {\n                _addResponses(responses);\n            }\n            return api;\n        },\n        addReducers: function (reducers) {\n            _addReducers(reducers);\n            return api;\n        },\n        dispatch: function (action) {\n            _dispatcher(action);\n            return api;\n        },\n        getState: function (path) {\n            var lookup = alwaysArray(path);\n            return state$.getValue().getIn(lookup, getMap({}));\n        },\n        toJS: function (path) {\n            var lookup = alwaysArray(path);\n            return state$.getValue().getIn(lookup, getMap({})).toJS();\n        },\n        toJSON: function (path) {\n            var lookup = alwaysArray(path);\n            return state$.getValue().getIn(lookup, getMap({})).toJSON();\n        },\n        addMiddleware: function (middleware) {\n            _addMiddleware(middleware);\n            return api;\n        },\n        once: function (actions) {\n            var lookup = alwaysArray(actions);\n            return actionsWithState$.filter(function (x) {\n                return lookup.indexOf(x.action.type) > -1;\n            }).take(1);\n        },\n        changes: function (path) {\n            var lookup = alwaysArray(path);\n            return state$.map(function (x) { return x.getIn(lookup); })\n                .distinctUntilChanged()\n                .skip(1);\n        }\n    };\n    // add initial ones\n    _addReducers(initialReducers);\n    _addEffects(initialEffects);\n    _addMiddleware(initialMiddleware);\n    _addExtras(initialExtras);\n    function alwaysMap(input) {\n        return Immutable.Map.isMap(input) ? input : Immutable.fromJS(input || {});\n    }\n    function alwaysArray(input) {\n        return [].concat(input).filter(Boolean);\n    }\n    function isPlainObject(value) {\n        var objectTag = '[object Object]';\n        return Object.prototype.toString.call(value) === objectTag;\n    }\n    function getMap(incoming) {\n        return Immutable.Map(incoming);\n    }\n    return api;\n}\nexports.createStore = createStore;\nexports.default = createStore;\nif (window && ((typeof window.staunch) === 'undefined')) {\n    window.staunch = {\n        createStore: createStore\n    };\n}\n//# sourceMappingURL=index.js.map"]}
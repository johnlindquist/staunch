{"version":3,"sources":["node_modules/browser-pack/_prelude.js","dist/actions.js","dist/addEffects.js","dist/addReducers.js","dist/index.js","dist/responses.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","Object","defineProperty","value","index_1","actionStream","intialState","action$","storeReducers","mappedReducers","do","action","isPlainObject","console","error","type","withLatestFrom","reducers","mappedReducersThatMatchAction","filter","reducer","name","concat","scan","stateMap","_a","actionType","indexOf","setIn","payload","path","alwaysMap","reduce","outgoingValue","reducerPayload","ReducerTypes","MappedReducer","updateIn","currentValue","fns","fn","__assign","this","assign","arguments","p","prototype","hasOwnProperty","addEffects","incoming","actionsWithState$","storeExtras","userExtra$","_dispatcher","actionsApi","ofType","actionName","_addEffects","effects","extras","getValue","alwaysArray","forEach","effect","stream","triggers","Array","isArray","trigger","map","via","addReducers","newReducer$","newMappedReducer$","_registerOnStateTree","_addReducers","onNext","Boolean","state","keys","stateKey","currentFn","key","Rx","window","global","Immutable","actions_1","responses_1","addReducers_1","addEffects_1","BehaviorSubject","Subject","createStore","initialState","initialReducers","initialEffects","initialMiddleware","initialExtras","mergedInitialState","state$","newExtras$","subscribe","acc","storeResponses","newResponses","catch","err","Observable","throw","handleResponses","actionsWithResultingStateUpdate$","_addMiddleware","middleware","api","_addExtras","extra","_addResponses","responses","resp","item","targetName","register","input","dispatch","getState","lookup","getIn","getMap","toJS","toJSON","addMiddleware","once","actions","x","take","changes","distinctUntilChanged","Map","isMap","fromJS","objectTag","toString","default","staunch","_","flatMap","matchingResponses","response","newActions","from"],"mappings":"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","sourceRoot":"","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar index_1 = require(\"./index\");\nfunction actionStream(intialState, action$, storeReducers, mappedReducers) {\n    return action$\n        .do(function (action) {\n        if (!index_1.isPlainObject(action)) {\n            return console.error('Please provide an object with at least a `type` property');\n        }\n        if ((typeof action.type) !== 'string') {\n            return console.error('Action was missing a `type` property', action);\n        }\n    })\n        .withLatestFrom(storeReducers, mappedReducers, function (action, reducers, mappedReducers) {\n        var mappedReducersThatMatchAction = mappedReducers\n            .filter(function (reducer) {\n            return reducer.name === action.type;\n        });\n        return {\n            action: action,\n            reducers: mappedReducersThatMatchAction.concat(reducers),\n        };\n    })\n        .scan(function (stateMap, _a) {\n        var action = _a.action, reducers = _a.reducers;\n        var actionType = action.type || (typeof action === 'string' ? action : '');\n        // is it a @@namespace ?\n        if (actionType.indexOf('@@NS-INIT') === 0) {\n            return stateMap.setIn(action.payload.path, index_1.alwaysMap((action.payload || {}).value));\n        }\n        else {\n            /**\n             * Iterate through all valid reducers\n             * This will include those registered via simple functions\n             * + those mapped to a path with a specific Action name\n             */\n            return reducers.reduce(function (outgoingValue, reducer) {\n                /**\n                 * Decide whether to pass {type: NAME, payload: VALUE}\n                 *                   or   VALUE only into the reducer\n                 *\n                 */\n                var reducerPayload = reducer.type === index_1.ReducerTypes.MappedReducer\n                    ? action.payload\n                    : action;\n                /**\n                 * Now use updateIn to call this reducers functions (there could be many)\n                 * on the value that lives at this point of the tree\n                 */\n                return outgoingValue.updateIn(reducer.path, function (currentValue) {\n                    return reducer.fns.reduce(function (value, fn) {\n                        return fn.call(null, value, reducerPayload, outgoingValue);\n                    }, currentValue);\n                });\n            }, stateMap);\n        }\n    }, intialState);\n}\nexports.actionStream = actionStream;\n//# sourceMappingURL=actions.js.map","\"use strict\";\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar index_1 = require(\"./index\");\nfunction addEffects(incoming, actionsWithState$, storeExtras, userExtra$, _dispatcher) {\n    var actionsApi = {\n        ofType: function (actionName) {\n            return actionsWithState$.filter(function (incoming) {\n                return incoming.action.type === actionName;\n            });\n        }\n    };\n    _addEffects(incoming);\n    function _addEffects(effects) {\n        var extras = Object.assign({}, storeExtras, userExtra$.getValue());\n        index_1.alwaysArray(effects).forEach(function (effect) {\n            if (typeof effect !== 'function') {\n                console.error('Effects must be functions, you provided', effect);\n            }\n            var stream = (function () {\n                if (effect.triggers && Array.isArray(effect.triggers)) {\n                    return actionsWithState$.filter(function (incoming) {\n                        return ~effect.triggers.indexOf(incoming.action.type);\n                    });\n                }\n                if (effect.trigger && typeof effect.trigger === 'string') {\n                    return actionsWithState$.filter(function (incoming) {\n                        return effect.trigger === incoming.action.type;\n                    });\n                }\n                return actionsApi;\n            })();\n            effect.call(null, stream, extras)\n                .map(function (action) {\n                return __assign({}, action, { via: '[effect]', name: (effect.name || '') });\n            })\n                .forEach(function (action) {\n                _dispatcher(action);\n            });\n        });\n    }\n}\nexports.addEffects = addEffects;\n//# sourceMappingURL=addEffects.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar index_1 = require(\"./index\");\n/**\n * Add either plain functions or {path, fns} pairs\n * @param reducers\n * @private\n */\nfunction addReducers(incoming, newReducer$, newMappedReducer$, _addEffects, _registerOnStateTree) {\n    _addReducers(incoming);\n    function _addReducers(reducers) {\n        index_1.alwaysArray(reducers).forEach(function (reducer) {\n            if (typeof reducer === 'function') {\n                return newReducer$.onNext({\n                    path: [],\n                    fns: [].concat(reducer).filter(Boolean)\n                });\n            }\n            if (index_1.isPlainObject(reducer)) {\n                if (reducer.state) {\n                    if (reducer.reducers) {\n                        /**\n                         * if 'state' and 'reducers' key were found,\n                         * we bind the reducers to that top-level state key\n                         */\n                        Object.keys(reducer.state).forEach(function (stateKey) {\n                            _addReducers({ path: stateKey, fns: reducer.reducers });\n                        });\n                    }\n                    if (reducer.effects) {\n                        _addEffects(reducer.effects);\n                    }\n                    /**\n                     *\n                     */\n                    _registerOnStateTree(reducer.state);\n                    return;\n                }\n                if (reducer.path && reducer.reducers) {\n                    Object.keys(reducer.reducers).forEach(function (name) {\n                        var currentFn = reducer.reducers[name];\n                        newMappedReducer$.onNext({\n                            path: [].concat(reducer.path),\n                            fns: [currentFn],\n                            name: name,\n                            type: index_1.ReducerTypes.MappedReducer\n                        });\n                    });\n                    return;\n                }\n                /**\n                 * if path/fn pairs given\n                 */\n                if (reducer.path && reducer.fns) {\n                    newReducer$.onNext({\n                        path: [].concat(reducer.path).filter(Boolean),\n                        fns: [].concat(reducer.fns).filter(Boolean)\n                    });\n                }\n                else {\n                    // redux style key: fn pairs\n                    for (var key in reducer) {\n                        newReducer$.onNext({\n                            path: [].concat(key).filter(Boolean),\n                            fns: [].concat(reducer[key]).filter(Boolean)\n                        });\n                    }\n                }\n            }\n        });\n    }\n}\nexports.addReducers = addReducers;\n//# sourceMappingURL=addReducers.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Rx = (typeof window !== \"undefined\" ? window['Rx'] : typeof global !== \"undefined\" ? global['Rx'] : null);\nvar Immutable = (typeof window !== \"undefined\" ? window['Immutable'] : typeof global !== \"undefined\" ? global['Immutable'] : null);\nvar actions_1 = require(\"./actions\");\nvar responses_1 = require(\"./responses\");\nvar addReducers_1 = require(\"./addReducers\");\nvar addEffects_1 = require(\"./addEffects\");\nvar BehaviorSubject = Rx.BehaviorSubject;\nvar Subject = Rx.Subject;\nvar ReducerTypes;\n(function (ReducerTypes) {\n    ReducerTypes[ReducerTypes[\"MappedReducer\"] = 'MappedReducer'] = \"MappedReducer\";\n    ReducerTypes[ReducerTypes[\"GlobalReducer\"] = 'GlobalReducer'] = \"GlobalReducer\";\n})(ReducerTypes = exports.ReducerTypes || (exports.ReducerTypes = {}));\nfunction createStore(initialState, initialReducers, initialEffects, initialMiddleware, initialExtras) {\n    var mergedInitialState = alwaysMap(initialState);\n    var state$ = new BehaviorSubject(mergedInitialState);\n    var userExtra$ = new BehaviorSubject({});\n    var newExtras$ = new Subject();\n    newExtras$.scan(function (extras, incoming) {\n        return Object.assign({}, extras, incoming);\n    }, {}).subscribe(userExtra$);\n    // reducers to act upon state\n    var storeReducers = new BehaviorSubject([]);\n    var newReducer$ = new Subject();\n    newReducer$.scan(function (acc, incoming) {\n        return acc.concat(incoming);\n    }, []).subscribe(storeReducers);\n    // Mapped reducers\n    var mappedReducers = new BehaviorSubject([]);\n    var newMappedReducer$ = new Subject();\n    newMappedReducer$.scan(function (acc, incoming) {\n        return acc.concat(incoming);\n    }, []).subscribe(mappedReducers);\n    // responses\n    var storeResponses = new BehaviorSubject([]);\n    var newResponses = new Subject();\n    newResponses.scan(function (acc, incoming) {\n        return acc.concat(incoming);\n    }, []).subscribe(storeResponses);\n    // stream of actions\n    var action$ = new Subject();\n    // stream\n    actions_1.actionStream(mergedInitialState, action$, storeReducers, mappedReducers)\n        .catch(function (err) {\n        // console.error(err);\n        return Rx.Observable.throw(err);\n    })\n        .subscribe(state$);\n    /**\n     * Create a stream that has updates + resulting state updates\n     */\n    var actionsWithState$ = action$.withLatestFrom(state$, function (action, state) {\n        return {\n            action: action,\n            state: state\n        };\n    });\n    /**\n     * Setup responses for declarative cross-domain communication\n     */\n    responses_1.handleResponses(actionsWithState$, storeResponses)\n        .subscribe(function (action) { return _dispatcher(action); });\n    /**\n     * Default extras that get passed to all 'effects'\n     */\n    var storeExtras = {\n        state$: state$,\n        action$: action$,\n        actionsWithState$: actionsWithState$,\n        actionsWithResultingStateUpdate$: actionsWithState$\n    };\n    /**\n     * Dispatch 1 or many actions\n     * @param action\n     * @returns {*}\n     * @private\n     */\n    function _dispatcher(action) {\n        if (Array.isArray(action)) {\n            return action.forEach(function (a) {\n                action$.onNext(a);\n            });\n        }\n        return action$.onNext(action);\n    }\n    function _addEffects(incoming) {\n        addEffects_1.addEffects(incoming, actionsWithState$, storeExtras, userExtra$, _dispatcher);\n    }\n    function _addMiddleware(middleware) {\n        alwaysArray(middleware).forEach(function (middleware) {\n            middleware.call(null, api);\n        });\n    }\n    function _addExtras(extras) {\n        alwaysArray(extras).forEach(function (extra) {\n            newExtras$.onNext(extra);\n        });\n    }\n    function _registerOnStateTree(state) {\n        for (var key in state) {\n            // now init with action\n            _dispatcher({\n                type: '@@NS-INIT(' + key + ')',\n                payload: {\n                    path: [key],\n                    value: state[key]\n                }\n            });\n        }\n    }\n    function _addResponses(responses) {\n        alwaysArray(responses).forEach(function (resp) {\n            Object.keys(resp).forEach(function (actionName) {\n                var item = resp[actionName];\n                newResponses.onNext({\n                    name: actionName,\n                    path: [].concat(item.path).filter(Boolean),\n                    targetName: item.action\n                });\n            });\n        });\n    }\n    function _addReducers(incoming) {\n        addReducers_1.addReducers(incoming, newReducer$, newMappedReducer$, _addEffects, _registerOnStateTree);\n    }\n    var api = {\n        state$: state$,\n        action$: action$,\n        actionsWithState$: actionsWithState$,\n        actionsWithResultingStateUpdate$: actionsWithState$,\n        register: function (input) {\n            var state = input.state, reducers = input.reducers, effects = input.effects, responses = input.responses;\n            if (state) {\n                _registerOnStateTree(state);\n            }\n            if (reducers) {\n                _addReducers(reducers);\n            }\n            if (effects) {\n                _addEffects(effects);\n            }\n            if (responses) {\n                _addResponses(responses);\n            }\n            return api;\n        },\n        addReducers: function (reducers) {\n            _addReducers(reducers);\n            return api;\n        },\n        dispatch: function (action) {\n            _dispatcher(action);\n            return api;\n        },\n        getState: function (path) {\n            var lookup = alwaysArray(path);\n            return state$.getValue().getIn(lookup, getMap({}));\n        },\n        toJS: function (path) {\n            var lookup = alwaysArray(path);\n            return state$.getValue().getIn(lookup, getMap({})).toJS();\n        },\n        toJSON: function (path) {\n            var lookup = alwaysArray(path);\n            return state$.getValue().getIn(lookup, getMap({})).toJSON();\n        },\n        addMiddleware: function (middleware) {\n            _addMiddleware(middleware);\n            return api;\n        },\n        once: function (actions) {\n            var lookup = alwaysArray(actions);\n            return actionsWithState$.filter(function (x) {\n                return lookup.indexOf(x.action.type) > -1;\n            }).take(1);\n        },\n        changes: function (path) {\n            var lookup = alwaysArray(path);\n            return state$.map(function (x) { return x.getIn(lookup); })\n                .distinctUntilChanged();\n        }\n    };\n    // add initial ones\n    _addReducers(initialReducers);\n    _addEffects(initialEffects);\n    _addMiddleware(initialMiddleware);\n    _addExtras(initialExtras);\n    return api;\n}\nexports.createStore = createStore;\nfunction alwaysArray(input) {\n    return [].concat(input).filter(Boolean);\n}\nexports.alwaysArray = alwaysArray;\nfunction getMap(incoming) {\n    return Immutable.Map(incoming);\n}\nexports.getMap = getMap;\nfunction alwaysMap(input) {\n    return Immutable.Map.isMap(input) ? input : Immutable.fromJS(input || {});\n}\nexports.alwaysMap = alwaysMap;\nfunction isPlainObject(value) {\n    var objectTag = '[object Object]';\n    return Object.prototype.toString.call(value) === objectTag;\n}\nexports.isPlainObject = isPlainObject;\nexports.default = createStore;\nif ((typeof window !== 'undefined') && ((typeof window.staunch) === 'undefined')) {\n    window.staunch = {\n        createStore: createStore\n    };\n}\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Rx = (typeof window !== \"undefined\" ? window['Rx'] : typeof global !== \"undefined\" ? global['Rx'] : null);\nvar index_1 = require(\"./index\");\nfunction handleResponses(actionsWithState$, storeResponses) {\n    /**\n     * Setup responses for declarative cross-domain communication\n     */\n    return actionsWithState$\n        .withLatestFrom(storeResponses)\n        .filter(function (_a) {\n        var _ = _a[0], storeResponses = _a[1];\n        return storeResponses.length > 0;\n    })\n        .flatMap(function (incoming) {\n        var _a = incoming[0], action = _a.action, state = _a.state;\n        var storeResponses = incoming[1];\n        var actionName = action.type;\n        var matchingResponses = storeResponses\n            .filter(function (response) { return response.name === actionName; });\n        var newActions = matchingResponses.map(function (x) {\n            return {\n                type: x.targetName,\n                payload: state.getIn(x.path, index_1.getMap({})).toJS(),\n                via: \"[response to (\" + actionName + \")]\"\n            };\n        });\n        return Rx.Observable.from(newActions);\n    });\n}\nexports.handleResponses = handleResponses;\n//# sourceMappingURL=responses.js.map"]}